#!/usr/bin/env Rscript

library(ggplot2)
library(scales)

usage = "
USAGE:

dot_plot_plus.Rscript  out.png  q-ctg-name q-ctg-len contig.cov  r1-ctg-name  r1.rdotplot  [ r2-ctg-name  r2.rdotplot ]

arguments are positional because lazy

out.png         output png image file of the dotplot with coverage hist
q-ctg-name      name of query contig
q-ctg-len       length of the query contig
contig.cov      input window coverage hist .tsv file generated by purge_haplotigs
r1-ctg-name     name of first ref contig
r1.rdotplot     lastz rdotplot output for query contig against first reference
r2-ctg-name     name of second ref contig
r2.rdotplot     second reference lastz-rdotplot

"

# thanks google
multiplot <- function(..., plotlist = NULL, file, cols = 1, layout = NULL) {
  require(grid)
  plots <- c(list(...), plotlist)
  numPlots = length(plots)
  if (is.null(layout)) {
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                    ncol = cols, nrow = ceiling(numPlots/cols))
  }
  if (numPlots == 1) {
    print(plots[[1]])
  } else {
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    for (i in 1:numPlots) {
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}

args = commandArgs(trailingOnly = T)

if (length(args)<4){
    cat(usage)
    stop()
}

query_ctg = args[2]
query_len = as.integer(args[3])
cov_data = read.table(args[4], header = F)
names(cov_data) = c("X", "Y")
plot1_name = args[5]
plot1_data = read.table(args[6], header = T)
names(plot1_data) = c("X", "Y")
if(length(args) == 8){
    plot2_name = args[7]
    plot2_data = read.table(args[8], header = T)
    names(plot2_data) = c("X", "Y")
    ref2 = TRUE
} else {
    ref2 = FALSE
}

cov_max = mean(cov_data$Y) * 4

cov_plot = ggplot() + geom_line(data=cov_data, aes(x=cov_data$X, y=cov_data$Y)) + scale_x_continuous(name=query_ctg, limits=c(0,query_len)) + scale_y_continuous(name="Reads per bin", labels=scientific, limits=c(0,cov_max))

plot1_plot = ggplot() + geom_path(data=plot1_data, aes(x=plot1_data$X, y=plot1_data$Y)) + scale_x_continuous(name=NULL, limits=c(0,query_len)) + scale_y_continuous(name=plot1_name, labels=scientific)

if (ref2){
    plot2_plot = ggplot() + geom_path(data=plot2_data, aes(x=plot2_data$X, y=plot2_data$Y)) + scale_x_continuous(name=NULL, limits=c(0,query_len)) + scale_y_continuous(name=plot2_name, labels=scientific)
    png(filename = args[1], width = 1000, height = 1500, units = "px")
    multiplot(plot1_plot, plot2_plot, cov_plot)
} else {
    png(filename = args[1], width = 1000, height = 1000, units = "px")
    multiplot(plot1_plot, cov_plot)
}

